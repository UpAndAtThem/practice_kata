#! /usr/bin/env ruby
require 'pg'
require 'pry'
require 'io/console'

class CLI
  def initialize
    @app = ExpenseData.new
  end

  def run(argv)
    case argv.first
    when 'list'
      @app.list
    when 'add'
      @app.add(argv[1], argv[2])
    when 'delete'
      @app.delete(argv[1])
    when 'search'
      @app.search(argv[1])
    when 'clear'
      @app.clear
    when nil
      puts documentation
    end
  end

  def documentation
    <<~DIRECTIONS
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field

    DIRECTIONS
  end
end

class ExpenseData
  def initialize
    @conn = PG.connect(dbname: "expense")
    setup_schema
  end

  def setup_schema
    table_check_query = <<~TC
                        SELECT COUNT(*)
                        FROM information_schema.tables
                        WHERE table_schema = 'public' AND table_name = 'expenses'
                        TC

    create_table_sql = <<~CREATE_TABLE
                         CREATE TABLE expenses (
                           id serial PRIMARY KEY,
                           amount numeric(6,2) NOT NULL CHECK(amount >= 0.01),
                           memo text NOT NULL,
                           created_on date NOT NULL DEFAULT NOW()
                         )
                         CREATE_TABLE

    has_table = @conn.exec(table_check_query)

    unless has_table.values.first.first == '1'
      @conn.exec(create_table_sql)
    end
  end

  def add(amount, memo)
    return "You need an amount and memo" if [amount, memo].any? { |arg| arg.nil? }
    insert_statement = "INSERT INTO expenses (amount, memo) VALUES ($1, $2)"
    @conn.exec_params(insert_statement, [amount, memo])
  end

  def delete(tuple_id)
    select_query = "SELECT * FROM expenses WHERE id = $1"
    tuple_for_deletion = @conn.exec_params(select_query, [tuple_id])

    if tuple_for_deletion.values.empty?
      puts("There is no expense with that ID") 
    else
      delete_query = "DELETE FROM expenses WHERE id = $1"
      @conn.exec_params(delete_query, [tuple_id])

      puts "The following expense has been deleted:"
      display_query(tuple_for_deletion)
    end
  end

  def clear
    puts "Are you sure you want to delete all expenses? (y/n)"
    response = $stdin.getch

    if response == 'y'
      @conn.exec("DELETE FROM expenses")
      puts "All expenses were deleted"
    else
      puts "No expenses were deleted."
    end
  end

  def search(memo)
    search_query = "SELECT * FROM expenses WHERE memo ILIKE $1"
    res = @conn.exec_params(search_query, ["%#{memo}%"])
    display_query(res)
  end

  def list
    res = @conn.exec('SELECT * FROM expenses')

    display_query(res)
  end

  private

  def display_query(res)
    if res.values.empty?
      puts "There are no expenses"
    else
      res.each do |tuple|
        columns = [ tuple["id"].rjust(3),
                    tuple["created_on"].rjust(10),
                    tuple["amount"].rjust(8),
                    tuple["memo"]]

        puts columns.join(" | ")
      end

      display_count(res)
    end
  end

  def display_count(res)
    puts "-" * 50

    puts "There are #{res.count} expenses"
    amounts = res.map { |row| row["amount"].to_f }
    sum = sprintf("%0.02f", amounts.reduce(&:+))

    puts "Total" + sum.rjust(22)
  end
end

CLI.new.run(ARGV)